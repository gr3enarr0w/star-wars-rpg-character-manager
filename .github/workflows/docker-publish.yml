name: Build and Publish Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gr3enarr0w/python-course-app

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üèóÔ∏è Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}

    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        labels: |
          org.opencontainers.image.title=star-wars-rpg-character-manager
          org.opencontainers.image.description=Star Wars RPG Character Manager - Professional character creation and management tool
          org.opencontainers.image.source=https://github.com/gr3enarr0w/python-course-app
          org.opencontainers.image.url=https://github.com/gr3enarr0w/python-course-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=v{{date 'YYYY.MM.DD'}}-{{sha}},enable={{is_default_branch}}

    - name: üê≥ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: üöÄ Manual push (temporary workaround)
      if: github.event_name != 'pull_request'
      run: |
        echo "Docker build completed successfully"
        echo "Manual push would be required due to GHCR permission issues"
        echo "Built tags: ${{ steps.meta.outputs.tags }}"
        echo "For now, use local Docker build and manual push to ghcr.io"

    - name: üéØ Update deployment status
      if: github.event_name != 'pull_request'
      run: |
        echo "## üê≥ Docker Image Published" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Image Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Usage" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: üîç Debug workflow status
      if: always()
      run: |
        echo "Workflow completed"
        echo "Event: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Registry: ${{ env.REGISTRY }}"